import { peer } from '@hyperledger/fabric-protos';
/**
 * Enumeration of transaction status codes.
 */
export declare const StatusCode: { [P in keyof typeof peer.TxValidationCode]: (typeof peer.TxValidationCode)[P]; };
export declare const StatusNames: Readonly<{
    0: "VALID";
    1: "NIL_ENVELOPE";
    2: "BAD_PAYLOAD";
    3: "BAD_COMMON_HEADER";
    4: "BAD_CREATOR_SIGNATURE";
    5: "INVALID_ENDORSER_TRANSACTION";
    6: "INVALID_CONFIG_TRANSACTION";
    7: "UNSUPPORTED_TX_PAYLOAD";
    8: "BAD_PROPOSAL_TXID";
    9: "DUPLICATE_TXID";
    10: "ENDORSEMENT_POLICY_FAILURE";
    11: "MVCC_READ_CONFLICT";
    12: "PHANTOM_READ_CONFLICT";
    13: "UNKNOWN_TX_TYPE";
    14: "TARGET_CHAIN_NOT_FOUND";
    15: "MARSHAL_TX_ERROR";
    16: "NIL_TXACTION";
    17: "EXPIRED_CHAINCODE";
    18: "CHAINCODE_VERSION_CONFLICT";
    19: "BAD_HEADER_EXTENSION";
    20: "BAD_CHANNEL_HEADER";
    21: "BAD_RESPONSE_PAYLOAD";
    22: "BAD_RWSET";
    23: "ILLEGAL_WRITESET";
    24: "INVALID_WRITESET";
    25: "INVALID_CHAINCODE";
    254: "NOT_VALIDATED";
    255: "INVALID_OTHER_REASON";
}>;
/**
 * Status of a transaction that is committed to the ledger.
 */
export interface Status {
    /**
     * Block number in which the transaction committed.
     */
    blockNumber: bigint;
    /**
     * Transaction validation status code. The value corresponds to one of the values enumerated by {@link StatusCode}.
     */
    code: peer.TxValidationCodeMap[keyof peer.TxValidationCodeMap];
    /**
     * `true` if the transaction committed successfully; otherwise `false`.
     */
    successful: boolean;
    /**
     * The ID of the transaction.
     */
    transactionId: string;
}
//# sourceMappingURL=status.d.ts.map